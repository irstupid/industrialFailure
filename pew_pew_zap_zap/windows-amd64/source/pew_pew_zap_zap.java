/* autogenerated by Processing revision 1293 on 2024-08-28 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import processing.sound.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class pew_pew_zap_zap extends PApplet {



SoundFile pew;
SoundFile explosion;
SoundFile zap;
SoundFile laserBounce;
SoundFile boop;
SoundFile hiss;
SoundFile bigBoom;
SoundFile shot;
SoundFile pop;
Sound s = new Sound(this);

Gun gun = null;
ArrayList<Particle> particles = new ArrayList<Particle>();
ArrayList<SnowMan> snowMen = new ArrayList<SnowMan>();

int spawnTime;
int difficulty = 20;
int difficultyUpTime = 30;

float[] circles = new float[10];
float noiseX = random(0, 1000);
float noiseY = random(0, 1000);

int newExplodeTime;
int newSoundTime;

int state = 3;
int t;

int score = 0;
int scoreTime = 30;

JSONArray scores = null;
int selectedKey = 1;
String name = new String();

float[] textPosX = new float[108];
float[] textPosY = new float[108];
int textBlinkTime = 10;
int[] scoreBordScores;
String[] scoreBordNames;

boolean arcade = true;
boolean shooting = false;
boolean aDown;
boolean dDown;

long blackOut = 6480000;

public void setup()
{
  //size(800, 800, P2D);
  /* size commented out by preprocessor */;
  
  for(int i = 0; i < circles.length; i++)
  {
    circles[i] = (float) i/circles.length;
  }
  
  gun = new Gun(width/2, height/2, 0);
  //snowMen.add(new SnowMan(3, 200, 200));
  
  s.volume(1);
  pew = new SoundFile(this, "pew.wav");
  pew.amp(1);
  explosion = new SoundFile(this, "explosion.wav");
  explosion.amp(0.1f);
  zap = new SoundFile(this, "zap.wav");
  zap.amp(0.5f);
  laserBounce = new SoundFile(this, "laserBounce.wav");
  laserBounce.amp(0.5f);
  boop = new SoundFile(this, "boop.wav");
  boop.amp(0.5f);
  hiss = new SoundFile(this, "hiss.wav");
  hiss.rate(2);
  bigBoom = new SoundFile(this, "bigBoom.wav");
  shot = new SoundFile(this, "shot.wav");
  pop = new SoundFile(this, "pop.mp3");
  pop.amp(0.1f);  
  
  calculateScoreBord();
}

public void draw()
{
  background(0);
  if(state != 4)
  {
    push();
      noStroke();
      for(int i = circles.length - 1; i >= 0; i--)
      {
        circles[i] -= 0.005f;
        fill(0xFFFFFFFF, constrain(((1 - circles[i])) * 200, 0, 50));
        ellipse(width/2, height/2, circles[i] * width * (1 + PI/5), circles[i] * height * (1 + PI/5)); 
        if(circles[i] < 0)
        {
          circles[i] = 1;
        }
      }
      
    noiseX += 0.01f * (mouseX - width/2)/100;
    noiseY += 0.01f * (mouseY - height/2)/100;
    for(int x = 0; x < 100; x++)
    {
      for(float y = 0; y < 100; y++)
      {
        fill(noise(x * 0.03f + noiseX, y * 0.03f + noiseY) * 255, 150);
        rect(x * width/100, y * width/100, width/100, width/100);
      }
    }
    pop();
  }
  
  if(state == 0)
  {
    difficultyUpTime--;
    if(difficultyUpTime <= 0)
  {
    difficultyUpTime = 60 + floor(difficulty/2 - 30);
    difficulty++;
  }
  
  scoreTime--;
  if(scoreTime <= 0)
  {
    scoreTime = 30;
    score++;
  }
    
    spawnTime--;
    if(spawnTime <= 0)
    {
        if(random(0, 2) > 1)
        {
          if(random(0, 2) > 1)
          {
            snowMen.add(new SnowMan((int) random(1, 3.5f), 0, random(0, height)));
          }
          else
          {
            snowMen.add(new SnowMan((int) random(1, 3.5f), width, random(0, height)));
          }
        }
        else
        {
          if(random(0, 2) > 1)
          {
            snowMen.add(new SnowMan((int) random(1, 3.5f), random(0, width), 0));
          }
          else
          {
            snowMen.add(new SnowMan((int) random(1, 3.5f), random(0, width), height));
          }
        }
      spawnTime = (int) random(100 - difficulty, 150 - difficulty);
    }
    
    gun.draw();
    for(int i = 0; i < snowMen.size(); i++)
    {
      snowMen.get(i).draw();
    }
    for(int i = 0; i < particles.size(); i++)
    {
      particles.get(i).draw();
    }
       
    textSize(100);
    textPosX[99] = random(-20, 20);
    textPosY[99] = random(-20, 20);
    fill(0xFF0000CC, 100);
    text(score, width/2 + textPosX[99], 100 + textPosY[99]);
    textPosX[100] = random(-20, 20);
    textPosY[100] = random(-20, 20);
    fill(0xFF00CC00, 100);
    text(score, width/2 + textPosX[100], 100 + textPosY[100]);
    textPosX[101] = random(-10, 10);
    textPosY[101] = random(-10, 10);
    fill(0xFFFF0000);
    text(score, width/2 + textPosX[101], 100 + textPosY[101]);
  }
  else if(state == 1)
  {
    t++;
    if(t >= 120)
    {
      t = 0;
      
      gun.bullets = new ArrayList<Bullet>();
      gun.lasers = new ArrayList<Laser>();
      gun.missiles = new ArrayList<Missile>();
      gun.fastBullets = new ArrayList<FastBullet>();
      
      pew.stop();
      explosion.stop();
      zap.stop();
      laserBounce.stop();
      boop.stop();
      hiss.stop();
      bigBoom.stop();
      shot.stop();
      pop.stop();
      
      newExplodeTime = 0;
      newSoundTime = 0;
      
      JSONArray scores = loadJSONArray("data/scores.json");
      int[] sortScores = new int[scores.size()];
      for(int i = 0; i < scores.size(); i++)
      {
        sortScores[i] = scores.getJSONObject(i).getInt("score");
      }
      sortScores = sort(sortScores);
      if(sortScores.length < 10)
      {
        blackOut = 6480000;
        state = 2;
      }
      else if(sortScores[constrain(sortScores.length - 10, 0, scores.size())] < score)
      {
        blackOut = 6480000;
        state = 2;
      }
      else
      {
        blackOut = 6480000;
        state = 3;
      }
    }
    
    newExplodeTime--;
    if(newExplodeTime <= 0)
    {
      newExplodeTime = (int) random(4, 10);
      particles.add(new Particle(width/2 + random(-50, 50), height/2 + random(-50, 50), 1 + 3 * ((int) random(1, 0))));
    }
    newSoundTime--;
    if(newSoundTime <= 0)
    {
      newSoundTime = (int) random(5, 15);
      if(random(0, 1) <= 0.5f)
      {
        explosion.play();
      }
      else
      {
        bigBoom.play();
      }
    }
    
    for(int i = 0; i < snowMen.size(); i++)
    {
      snowMen.get(i).draw();
    }
    for(int i = 0; i < particles.size(); i++)
    {
      particles.get(i).draw();
    }
  }
  else if(state == 2)
  {
    push();
      textSize(50);
      fill((selectedKey == 1 ? 0xFFAAAAFF : 0xFFAAAAAA));
      rect(width/2 - 120, height/2, 100, 100, 20);
      fill(0xFFFFFFFF);
      text("A", width/2 + 5 - 120, height/2 + 65);
      text("B", width/2 + 35 - 120, height/2 + 65);
      text("C", width/2 + 65 - 120, height/2 + 65);
      fill((selectedKey == 2 ? 0xFFAAAAFF : 0xFFAAAAAA));
      rect(width/2, height/2, 100, 100, 20);
      fill(0xFFFFFFFF);
      text("D", width/2 + 5, height/2 + 65);
      text("E", width/2 + 35, height/2 + 65);
      text("F", width/2 + 65, height/2 + 65);
      fill((selectedKey == 3 ? 0xFFAAAAFF : 0xFFAAAAAA));
      rect(width/2 + 120, height/2, 100, 100, 20);
      fill(0xFFFFFFFF);
      text("G", width/2 + 5 + 120, height/2 + 65);
      text("H", width/2 + 37 + 120, height/2 + 65);
      text("I", width/2 + 72 + 120, height/2 + 65);
      fill((selectedKey == 4 ? 0xFFAAAAFF : 0xFFAAAAAA));
      rect(width/2 - 120, height/2 + 120, 100, 100, 20);
      fill(0xFFFFFFFF);
      text("J", width/2 + 5 - 120, height/2 + 65 + 120);
      text("K", width/2 + 35 - 120, height/2 + 65 + 120);
      text("L", width/2 + 65 - 120, height/2 + 65 + 120);
      fill((selectedKey == 5 ? 0xFFAAAAFF : 0xFFAAAAAA));
      rect(width/2, height/2 + 120, 100, 100, 20);
      fill(0xFFFFFFFF);
      text("M", width/2 + 3, height/2 + 65 + 120);
      text("N", width/2 + 35, height/2 + 65 + 120);
      text("O", width/2 + 65, height/2 + 65 + 120);
      fill((selectedKey == 6 ? 0xFFAAAAFF : 0xFFAAAAAA));
      rect(width/2 + 120, height/2 + 120, 100, 100, 20);
      fill(0xFFFFFFFF);
      text("P", width/2 + 5 + 120, height/2 + 65 + 120);
      text("Q", width/2 + 32 + 120, height/2 + 65 + 120);
      text("R", width/2 + 65 + 120, height/2 + 65 + 120);
      fill((selectedKey == 7 ? 0xFFAAAAFF : 0xFFAAAAAA));
      rect(width/2 - 120, height/2 + 240, 100, 100, 20);
      fill(0xFFFFFFFF);
      text("S", width/2 + 5 - 120, height/2 + 65 + 240);
      text("T", width/2 + 35 - 120, height/2 + 65 + 240);
      text("U", width/2 + 65 - 120, height/2 + 65 + 240);
      fill((selectedKey == 8 ? 0xFFAAAAFF : 0xFFAAAAAA));
      rect(width/2, height/2 + 240, 100, 100, 20);
      fill(0xFFFFFFFF);
      text("V", width/2 + 3, height/2 + 65 + 240);
      text("W", width/2 + 30, height/2 + 65 + 240);
      text("X", width/2 + 69, height/2 + 65 + 240);
      fill((selectedKey == 9 ? 0xFFAAAAFF : 0xFFAAAAAA));
      rect(width/2 + 120, height/2 + 240, 100, 100, 20);
      fill(0xFFFFFFFF);
      text("Y", width/2 + 5 + 120, height/2 + 65 + 240);
      text("Z", width/2 + 30 + 120, height/2 + 65 + 240);
      textSize(25);
      text("dlt", width/2 + 60 + 120, height/2 + 65 + 240);
      textSize(100);
      fill(0xFFFFFFFF);
      text(name, width/2 - ((name.length() - 1) * 25) + 25, height/2 - 50);
      
      textSize(100);
      
      fill(0xFF0000CC, 100);
      textPosX[102] = random(-20, 20);
      textPosY[102] = random(-20, 20);
      text("please enter name", width/2 - 333 + textPosX[102], height/2 - 275 + textPosY[102]);
      textPosX[103] = random(-20, 20);
      textPosY[103] = random(-20, 20);
      text("press start to play again", width/2 - 450 + textPosX[103], height/2 - 175 + textPosY[103]);
      fill(0xFF00CC00, 100);
      textPosX[104] = random(-20, 20);
      textPosY[104] = random(-20, 20);
      text("please enter name", width/2 - 333 + textPosX[104], height/2 - 275 + textPosY[104]);
      textPosX[105] = random(-20, 20);
      textPosY[105] = random(-20, 20);
      text("press start to play again", width/2 - 450 + textPosX[105], height/2 - 175 + textPosY[105]);
      fill(0xFFFF0000);
      textPosX[106] = random(-5, 5);
      textPosY[106] = random(-5, 5);
      text("please enter name", width/2 - 333 + textPosX[106], height/2 - 275 + textPosY[106]);
      textPosX[107] = random(-5, 5);
      textPosY[107] = random(-5, 5);
      text("press start to play again", width/2 - 450 + textPosX[107], height/2 - 175 + textPosY[107]);
    pop();
    
    blackOut--;
    if(blackOut < 0)
    {
      state = 4;
    }
  }
  else if(state == 3)
  {
    textPosX[0] = random(-20, 20);
    textPosY[0] = random(-20, 20);
    textSize(200);
    fill(0xFF0000CC, 100);
    text("strange", (width * 8)/27 + textPosX[0], height/5 + textPosY[0]);
    textPosX[1] = random(-20, 20);
    textPosY[1] = random(-20, 20);
    text("place", width/2 + textPosX[1], (height * 11)/30 + textPosY[1]);
    textPosX[66] = random(-20, 20);
    textPosY[66] = random(-20, 20);
    textSize(200);
    fill(0xFF00CC00, 100);
    text("strange", (width * 8)/27 + textPosX[66], height/5 + textPosY[66]);
    textPosX[67] = random(-20, 20);
    textPosY[67] = random(-20, 20);
    text("place", width/2 + textPosX[67], (height * 11)/30 + textPosY[67]);
    textPosX[2] = random(-10, 10);
    textPosY[2] = random(-10, 10);
    textSize(200);
    fill(0xFFFF0000);
    text("strange", (width * 8)/27 + textPosX[2], height/5 + textPosY[2]);
    textPosX[3] = random(-10, 10);
    textPosY[3] = random(-10, 10);
    text("place", width/2 + textPosX[3], (height * 11)/30 + textPosY[3]);
    
    textSize(100);
    textBlinkTime--;
    if(textBlinkTime < 0)
    {
      textPosX[4] = random(-10, 10);
      textPosY[4] = random(-10, 10);
      textBlinkTime = 40;
    }
    fill(0xFF0000CC, (((float) 20 - Math.abs(textBlinkTime - 20))/20) * 100);
    text("press start", (width * 19)/48 + textPosX[5], (height * 26)/32 + textPosY[5]);
    fill(0xFF00CC00, (((float) 20 - Math.abs(textBlinkTime - 20))/20) * 100);
    text("press start", (width * 19)/48 + textPosX[68], (height * 26)/32 + textPosY[68]);
    fill(0xFFFF0000, (((float) 20 - Math.abs(textBlinkTime - 20))/20) * 255);
    text("press start", (width * 19)/48 + textPosX[4], (height * 26)/32 + textPosY[4]);
    textPosX[5] = random(-20, 20);
    textPosY[5] = random(-20, 20);
    textPosX[68] = random(-20, 20);
    textPosY[68] = random(-20, 20);
    
    gun.draw();
    
    
    textSize(50);
    for(int i = 0; i < 10; i++)
    {
      if(i >= scoreBordNames.length)
      {
        break;
      }
      
      fill(0xFF0000CC, 100);
      textPosX[(i * 3) + 36] = random(-10, 10);
      textPosY[(i * 3) + 36] = random(-10, 10);
      textPosX[(i * 3) + 37] = random(-10, 10);
      textPosY[(i * 3) + 37] = random(-10, 10);
      textPosX[(i * 3) + 38] = random(-10, 10);
      textPosY[(i * 3) + 38] = random(-10, 10);
      text(i + 1, width/4 - (i == 9 ? 25 : 0) + textPosX[i * 3 + 36], (height * 3)/10 + textPosY[i * 3 + 36] + i * 50);
      text(scoreBordScores[i], width/4 + 50 + textPosX[i * 3 + 37], (height * 3)/10 + textPosY[i * 3 + 37] + i * 50);
      text(scoreBordNames[i], width/4 + 75 + textPosX[i * 3 + 38] + String.valueOf(scoreBordScores[i]).length() * 25, (height * 3)/10 + textPosY[i * 3 + 38] + i * 50);
      
      fill(0xFF00CC00, 100);
      textPosX[(i * 3) + 69] = random(-10, 10);
      textPosY[(i * 3) + 69] = random(-10, 10);
      textPosX[(i * 3) + 70] = random(-10, 10);
      textPosY[(i * 3) + 70] = random(-10, 10);
      textPosX[(i * 3) + 71] = random(-10, 10);
      textPosY[(i * 3) + 71] = random(-10, 10);
      text(i + 1, width/4 - (i == 9 ? 25 : 0) + textPosX[i * 3 + 69], (height * 3)/10 + textPosY[i * 3 + 69] + i * 50);
      text(scoreBordScores[i], width/4 + 50 + textPosX[i * 3 + 70], (height * 3)/10 + textPosY[i * 3 + 70] + i * 50);
      text(scoreBordNames[i], width/4 + 75 + textPosX[i * 3 + 71] + String.valueOf(scoreBordScores[i]).length() * 25, (height * 3)/10 + textPosY[i * 3 + 71] + i * 50);
    
      fill(0xFFFF0000);
      textPosX[(i * 3) + 6] = random(-5, 5);
      textPosY[(i * 3) + 6] = random(-5, 5);
      textPosX[(i * 3) + 7] = random(-5, 5);
      textPosY[(i * 3) + 7] = random(-5, 5);
      textPosX[(i * 3) + 8] = random(-5, 5);
      textPosY[(i * 3) + 8] = random(-5, 5);
      text(i + 1, width/4 - (i == 9 ? 25 : 0) + textPosX[i * 3 + 6], (height * 3)/10 + textPosY[i * 3 + 6] + i * 50);
      text(scoreBordScores[i], width/4 + 50 + textPosX[i * 3 + 7], (height * 3)/10 + textPosY[i * 3 + 7] + i * 50);
      text(scoreBordNames[i], width/4 + 75 + textPosX[i * 3 + 8] + String.valueOf(scoreBordScores[i]).length() * 25, (height * 3)/10 + textPosY[i * 3 + 8] + i * 50);
    }
    
    blackOut--;
    if(blackOut < 0)
    {
      state = 4;
    }
  }
}
public void mousePressed()
{
  if(state == 0)
  {
    gun.shoot();
  }
}

public void keyPressed()
{
  if(state == 4)
  {
    state = 3;
    blackOut = 6480000;
  }
  if(state == 3)
  {
    if(key == 'z')
    {
      state = 0;
      particles = new ArrayList<Particle>();
      snowMen = new ArrayList<SnowMan>();
      score = 0;
      difficulty = 0;
    }
  }
  if(state == 0)
  {
    if(key == '1')
    {
      shooting = true;
      gun.shoot();
      gun.type = 0;
    }
    if(key == '2')
    {
      shooting = true;
      gun.shoot();
      gun.type = 1;
    }
    if(key == '3')
    {
      shooting = true;
      gun.shoot();
      gun.type = 2;
    }
    if(key == '4')
    {
      shooting = true;
      gun.shoot();
      gun.type = 3;
    }
  }
  if(state == 2)
  {
    if(key == 'w')
    {
      selectedKey -= 3;
    }
    if(key == 's')
    {
      selectedKey += 3;
    }
    if(key == 'a')
    {
      selectedKey -= 1;
    }
    if(key == 'd')
    {
      selectedKey += 1;
    }
    if(selectedKey > 9)
    {
      selectedKey -= 9;
    }
    if(selectedKey < 1)
    {
      selectedKey += 9;
    }
    
    if(key == '1')
    {
      if(selectedKey == 1)
      {
        name += "A";
      }
      else if(selectedKey == 2)
      {
        name += "D";
      }
      else if(selectedKey == 3)
      {
        name += "G";
      }
      else if(selectedKey == 4)
      {
        name += "J";
      }
      else if(selectedKey == 5)
      {
        name += "M";
      }
      else if(selectedKey == 6)
      {
        name += "P";
      }
      else if(selectedKey == 7)
      {
        name += "S";
      }
      else if(selectedKey == 8)
      {
        name += "V";
      }
      else if(selectedKey == 9)
      {
        name += "Y";
      }
    }
    if(key == '2')
    {
      if(selectedKey == 1)
      {
        name += "B";
      }
      else if(selectedKey == 2)
      {
        name += "E";
      }
      else if(selectedKey == 3)
      {
        name += "H";
      }
      else if(selectedKey == 4)
      {
        name += "K";
      }
      else if(selectedKey == 5)
      {
        name += "N";
      }
      else if(selectedKey == 6)
      {
        name += "Q";
      }
      else if(selectedKey == 7)
      {
        name += "T";
      }
      else if(selectedKey == 8)
      {
        name += "W";
      }
      else if(selectedKey == 9)
      {
        name += "Z";
      }
    }
    if(key == '3')
    {
      if(selectedKey == 1)
      {
        name += "C";
      }
      else if(selectedKey == 2)
      {
        name += "F";
      }
      else if(selectedKey == 3)
      {
        name += "I";
      }
      else if(selectedKey == 4)
      {
        name += "L";
      }
      else if(selectedKey == 5)
      {
        name += "O";
      }
      else if(selectedKey == 6)
      {
        name += "R";
      }
      else if(selectedKey == 7)
      {
        name += "U";
      }
      else if(selectedKey == 8)
      {
        name += "X";
      }
      else if(selectedKey == 9 && name.length() > 0)
      {
        name = name.replaceFirst(String.valueOf(name.charAt(name.length() - 1)), "");
      }
    }
    
    if(key == 'z')
    {
      blackOut = 1200;
      saveScore(name);
      state = 3;
      gun = new Gun(width/2, height/2, 0);
      calculateScoreBord();
    }
  }
  
  if(key == 'a')
  {
    aDown = true;
  }
  if(key == 'd')
  {
    dDown = true;
  }
}

public void keyReleased()
{
  if(key == 'a')
  {
    aDown = false;
  }
  if(key == 'd')
  {
    dDown = false;
  }
  if(key == '1')
  {
    shooting = false;
  }
  if(key == '2')
  {
    shooting = false;
  }
  if(key == '3')
  {
    shooting = false;
  }
  if(key == '4')
  {
    shooting = false;
  }
}

public void saveScore(String name)
{
  scores = loadJSONArray("scores.json");
  JSONObject value = new JSONObject();
  value.setString("name", name);
  value.setInt("score", score);
  value.setInt("ID", scores.size());
  scores.setJSONObject(scores.size(), value);
  saveJSONArray(scores, "data/scores.json");
}

public void calculateScoreBord()
{
  JSONArray scores = loadJSONArray("data/scores.json");
  PVector[] scoreBord = new PVector[scores.size()];
  for(int i = 0; i < scores.size(); i++)
  {
    scoreBord[i] = new PVector();
    scoreBord[i].x = scores.getJSONObject(i).getInt("score");
    scoreBord[i].y = scores.getJSONObject(i).getInt("ID");
  }
  for(int j = 0; j < scoreBord.length - 1; j++)
  {
    for(int i = 0; i < scoreBord.length - 1; i++)
    {
      if(!(scoreBord[i + 1].x > scoreBord[i].x))
      {
        PVector temp = new PVector(scoreBord[i].x, scoreBord[i].y);
        scoreBord[i] = scoreBord[i + 1];
        scoreBord[i + 1] = temp;
      }
    }
  }
  
  PVector[] temp = new PVector[scoreBord.length];
  for(int i = 0; i < temp.length; i++)
  {
    temp[temp.length - i - 1] = scoreBord[i];
  }
  scoreBord = temp;
  
  scoreBordScores = new int[scoreBord.length];
  scoreBordNames = new String[scoreBord.length];
  for(int i = 0; i < scoreBordNames.length; i++)
  {
    scoreBordScores[i] = (int) scoreBord[i].x;
    scoreBordNames[i] = scores.getJSONObject((int) scoreBord[i].y).getString("name");
  }
}
class Bullet
{
  float speed = 10;
  
  float x;
  float y;
  float direction;
  
  int damage = 15;
  
  Bullet(float x, float y, float direction)
  {
    this.x = x;
    this.y = y;
    this.direction = direction;
  }
  
  public void draw()
  {
    x += cos(direction) * speed;
    y += sin(direction) * speed;
    
    push();
      fill(0xFFFFFF00);
      ellipse(x, y, 20, 20);
    pop();
    
    if(x > width + 5 || x < 0 - 5 || y > height + 5 || y < 0 - 5)
    {
      die();
    }
  }
  
  public void die()
  {
    explosion.play();
    particles.add(new Particle(constrain(x, 0, width), constrain(y, 0, height), 1));
    gun.bullets.remove(this);
  }
}
class FastBullet
{
  float x;
  float y;
  float r;
  
  float speed = 20;
  float damage = 2;
  
  FastBullet(float x, float y, float r)
  {
    this.x = x;
    this.y = y;
    this.r = r + radians(random(-30, 30));
  }
  
  public void draw()
  {
    x += cos(r) * speed;
    y += sin(r) * speed;
    
    push();
      stroke(0xFFFFFFFF);
      strokeWeight(3.5f);
      line(x, y, x - cos(r) * 20, y - sin(r) * 20);
    pop();
    
    if(x > width + 5 || x < 0 - 5 || y > height + 5 || y < 0 - 5)
    {
      die();
    }
  }
  
  public void die()
  {
    pop.play();
    particles.add(new Particle(constrain(x, 0, width), constrain(y, 0, height), 5));
    gun.fastBullets.remove(this);
  }
}
class Gun
{ 
  float x;
  float y;
  float r;
  
  int type;
  
  ArrayList<Bullet> bullets = new ArrayList<Bullet>();
  ArrayList<Laser> lasers = new ArrayList<Laser>();
  ArrayList<Missile> missiles = new ArrayList<Missile>();
  ArrayList<FastBullet> fastBullets = new ArrayList<FastBullet>();
  
  int reloadTime;
  
  float rotateSpeed = 5;
  float rotateDirection;
  
  Gun(float x, float y, int type)
  {
    this.x = x;
    this.y = y;
    this.type = type;
  }
  
  public void draw()
  {
    if(!arcade)
    {
      r = -atan2(mouseX - x, mouseY - y) + radians(90);
    }
    else
    {
      if(aDown)
      {
        rotateDirection -= 0.07f;
      }
      else if(dDown)
      {
        rotateDirection += 0.07f;
      }
      else
      {
        if(rotateDirection != 0)
        {
          rotateDirection = 0;
        }
      }
      if(rotateDirection > 2)
      {
        rotateDirection = 2;
      }
      if(rotateDirection < -2)
      {
        rotateDirection = -2;
      }
      r += rotateDirection * radians(rotateSpeed);
    }
    
    for(int i = 0; i < bullets.size(); i++)
    {
      bullets.get(i).draw();
    }
    
    for(int i = 0; i < lasers.size(); i++)
    {
      lasers.get(i).draw();
    }
    
    for(int i = 0; i < missiles.size(); i++)
    {
      missiles.get(i).draw();
    }
    
    for(int i = 0; i < fastBullets.size(); i++)
    {
      fastBullets.get(i).draw();
    }
    
    if(type == 0)
    {
      push();
        translate(x, y);
        rotate(r + radians(90));
        rectMode(CENTER);
        fill(0xFF151515);
        ellipse(0, 0, 75, 75);
        rect(0, -50, 25, 40);
      pop();
    }
    else if(type == 1)
    {
      push();
        noStroke();
        translate(x, y);
        rotate(r + radians(90));
        rectMode(CENTER);
        fill(200);
        rect(0, 0, 65, 65);
        stroke(200);
        strokeWeight(20);
        line(0, 0, 0, -105);
        stroke(0xFFCD0000);
        strokeWeight(15);
        line(30, -50, -30, -50);
        line(20, -75, -20, -75);
        noStroke();
        fill(0xFFCD0000);
        ellipse(0, -105, 30, 30);
      pop();
    }
    else if(type == 2)
    {
      push();
        noStroke();
        translate(x, y);
        rotate(r + radians(90));
        rectMode(CENTER);
        fill(175);
        ellipse(0, 0, 100, 100);
        fill(0xFFAA0000);
        ellipse(-30, -100, 20, 20);
        ellipse(0, -100, 20, 20);
        ellipse(30, -100, 20, 20);
        fill(0xFFFFFF00);
        rect(0, -90, 100, 20, 10);
        fill(175);
        rect(0, -45, 100, 80);
      pop();
      
      reloadTime--;
    }
    else
    {
      if(shooting)
      {
        reloadTime--;
        if(reloadTime <= 0)
        {
          shot.play();
          for(int i = reloadTime; i < 1; i++)
          {
            fastBullets.add(new FastBullet(x + (cos(r) * 132) + (cos(r + radians(90)) * random(-30, 30)), y + (sin(r) * 132) + (sin(r + radians(90)) * random(-30, 30)), r));
            r += random(-0.05f, 0.05f);
          }
          reloadTime = 0;
        }
      }
      
      push();
        noStroke();
        translate(x, y);
        rotate(r + radians(90));
        scale(0.8f, 0.8f);
        rectMode(CENTER);
        fill(100);
        rect(0, -105, 20, 120);
        rect(25, -105, 20, 120);
        rect(-25, -105, 20, 120);
        fill(125);
        rect(0, 0, 90, 90);
        rect(0, -130, 90, 20);
      pop();
    }
  }
  
  public void shoot()
  {
    if(type == 0)
    {
      bullets.add(new Bullet(x + cos(r) * 60, y + sin(r) * 60, r));
      pew.play();
    }
    else if(type == 1)
    {
      lasers.add(new Laser(x + cos(r) * 100, y + sin(r) * 100, r));
      zap.play();
    }
    else if(type == 2 && reloadTime <= 0)
    {
      reloadTime = 10;
      missiles.add(new Missile(x + cos(r) * 110, y + sin(r) * 110, r));
    }
    else
    {
      reloadTime = 2;
    }
  }
}
class Laser
{
  int speed = 25;
  
  int bounces;
  float[] x = new float[6];
  float[] y = new float[6];
  float r;
  
  int damage = 10;
  
  Laser(float x, float y, float r)
  {
    for(int i = 0; i < this.x.length; i++)
    {
      this.x[i] = x;
      this.y[i] = y;
    }
    
    this.r = r;
  }
  
  public void draw()
  {
    //t++;
    
    for(int i = x.length - 1; i >= 1; i--)
    {
      x[i] = x[i - 1];
      y[i] = y[i - 1];
    }
    
    x[0] += cos(r) * speed;
    y[0] += sin(r) * speed;
    
    if(x[0] < 5)
    {
      x[0] = 5;
      r += radians(random(90, 135) * -(r/abs(r))); 
      bounces++;
      laserBounce.play();
    }
    if(x[0] > width - 5)
    {
      x[0] = width - 5;
      r += radians(random(90, 135) * (r/abs(r)));   
      bounces++;
      laserBounce.play();
    }
    if(y[0] < 5)
    {
      y[0] = 5;
      r += radians(random(90, 135) * (r/abs(r)));  
      bounces++;
      laserBounce.play();
    }
    if(y[0] > height - 5)
    {
      y[0] = height - 5;
      r += radians(random(90, 135) * -(r/abs(r)));   
      bounces++;
      laserBounce.play();
    }
    
    push();
      stroke(0xFFFF0000);
      strokeWeight(5);
      for(int i = 0; i < this.x.length - 1; i++)
      {
        line(x[i], y[i], x[i + 1], y[i + 1]);
      }
    pop();
    
    if(bounces > 3)
    {
      die();
    }
  }
  
  public void die()
  {
    boop.play();
    particles.add(new Particle(constrain(x[0], 0, width), constrain(y[0], 0, height), 2));
    gun.lasers.remove(this);
  }
}
class Missile
{
  float x;
  float y;
  float r;
  float rV;
  float speed = 7;
  
  int hissTime;
  
  Particle trail;
  
  float damage = 40;
  
  Missile(float x, float y, float r)
  {
    this.x = x;
    this.y = y;
    this.r = r;
    
    trail = new Particle(x, y, 3);
  }
  
  public void draw()
  {
    hissTime--;
    
    if(hissTime <= 0)
    {
      hiss.play();
      hissTime = 60;
    }
    
    rV += random(-0.01f, 0.01f);
    rV = constrain(rV, -0.1f, 0.1f);
    r += rV;
    
    x += cos(r) * speed;
    y += sin(r) * speed;
    
    
    trail.x = x + cos(r) * -25;
    trail.y = y + sin(r) * -25;
    trail.draw();
    
    push();
      translate(x, y);
      rotate(r + radians(90));
      rectMode(CENTER);
      noStroke();
      fill(200);
      rect(0, 0, 25, 50);
      fill(0xFFAA0000);
      triangle(-12.5f, -25, 12.5f, -25, 0, -60);
    pop();
    
    if(x > width + 5 || x < 0 - 5 || y > height + 5 || y < 0 - 5)
    {
      die();
    }
    
    for(int i = 0; i < gun.bullets.size(); i++)
    {
      if(dist(gun.bullets.get(i).x, gun.bullets.get(i).y, x, y) < 35)
      {
        die();
      }
    }
    
    for(int i = 0; i < gun.lasers.size(); i++)
    {
      if(dist(gun.lasers.get(i).x[0], gun.lasers.get(i).y[0], x, y) < 25)
      {
        die();
      }
    }
    
    for(int i = 0; i < gun.fastBullets.size(); i++)
    {
      if(dist(gun.fastBullets.get(i).x, gun.fastBullets.get(i).y, x, y) < 35)
      {
        die();
      }
    }
  }
  
  public void die()
  {
    particles.add(new Particle(constrain(x, 0, width), constrain(y, 0, height), 4));
    hiss.stop();
    bigBoom.play();
    gun.missiles.remove(this);
  }
}
class Particle
{
  float x;
  float y;
  int type;
  
  float[][] points = new float[10][];
  int t;
  
  Particle(float x, float y, int type)
  {
    this.x = x;
    this.y = y;
    this.type = type;
    
    if(type == 1)
    {
      for(int i = 0; i < points.length; i++)
      {
        points[i] = new float[]{0, 0, 0};
      }
    }
    else if(type == 2)
    {
      for(int i = 0; i < points.length; i++)
      {
        points[i] = new float[]{random(0, 359), random(2, 10), 0};
      }
    }
    else if(type == 3)
    {
      for(int i = 0; i < points.length; i++)
      {
        points[i] = new float[]{x, y, (i + 1) * 2.5f};
      }
    }
    else if(type == 4)
    {
      for(int i = 0; i < points.length; i++)
      {
        points[i] = new float[]{random(-30, 30) + x, random(-30, 30) + y, 10};
      }
    }
    else if(type == 5)
    {
      for(int i = 0; i < points.length; i++)
      {
        points[i] = new float[]{0, 0, 0};
      }
    }
  }
  
  public void draw()
  {
    t++;
    if (type == 1)
    {
      points[0][2] += random(10, 5) * (t <= 7 ? 1 : -1);
      if(points[0][2] < 0)
      {
        particles.remove(this);
      }
        
      push();
        fill(0xFFFA3F00);
        ellipse(x, y, points[0][2], points[0][2]);
        fill(0xFFFAD500);
        ellipse(x, y, points[0][2]/2, points[0][2]/2);
      pop();
    }
    else if(type == 4)
    {
      float totalSize = 0;
      
      for(int i = 0; i < points.length; i++)
      {
        points[i][2] += random(10, 5) * (t <= 7 ? 1 : -1);
        if(points[i][2] < 0)
        {
          points[i][2] = 0;
        }
        totalSize += points[i][2];
        
        push();
          fill(0xFFFA3F00);
          ellipse(points[i][0], points[i][1], points[i][2], points[i][2]);
          fill(0xFFFAD500);
          ellipse(points[i][0], points[i][1], points[i][2]/2, points[i][2]/2);
        pop();
      }
      
      if(totalSize == 0)
      {
        particles.remove(this);
      }
    }
    else if(type == 2)
    {
      float totalMagnitude = 0;
      
      push();
        stroke(0xFFFF0000);
        strokeWeight(3);
        for(int i = 0; i < points.length; i++)
        {
          points[i][1] += random(10, 5) * (t <= 3 ? 2 : -0.5f);
          if(points[i][1] < 0)
          {
            points[i][1] = 0;
          }
          totalMagnitude += points[i][1];
          
          if(i < points.length - 1)
          {
            line(points[i][1] * cos(radians(points[i][0])) + x, points[i][1] * sin(radians(points[i][0])) + y, x, y);
          }
        }
      pop();
      
      if(totalMagnitude == 0)
      {
        particles.remove(this);
      }
    }
    else if(type == 3)
    {
      for(int i = 0; i < points.length; i++)
      {
        points[i][2] -= 1.2f;
        
        if(points[i][2] <= 0)
        {
          points[i][0] = x;
          points[i][1] = y;
          points[i][2] = 25;
        }
        
        push();
          noStroke();
          fill(0xFFFA3F00, points[i][2] * 10);
          ellipse(points[i][0], points[i][1], points[i][2], points[i][2]);
        pop();
      }
    }
    else if(type == 5)
    {
      push();
        noFill();
        stroke(0xFFFFFFFF);
        strokeWeight(2);
        ellipse(x, y, t * 2, t * 2);
      pop();
      
      if(t > 5)
      {
        particles.remove(this);
      }
    }
  }
}
class SnowMan
{
  int type;
  float x;
  float y;
  float r;
  
  float speed;
  int health;
  int maxHealth;
  
  int pHealth;
  int pPHealth;
  
  SnowMan(int type, float x, float y)
  {
    this.x = x; 
    this.y = y;
    this.type = type;
    
    if(type == 1)
    {
      maxHealth = 50;
      speed = 0.75f;
    }
    if(type == 2)
    {
      maxHealth = 75;
      speed = 1;
    }
    if(type == 3)
    {
      maxHealth = 100;
      speed = 1;
    }
    
    health = maxHealth;
  }
  
  public void draw()
  {
    pPHealth = pHealth;
    pHealth = health;
    
    if(state == 0)
    {
      r = atan2(gun.y - y, gun.x - x);
      x += cos(r) * speed;
      y += sin(r) * speed;
    }
    
    if(type == 1)
    {
      for(int i = 0; i < gun.bullets.size(); i++)
      {
        if(dist(gun.bullets.get(i).x, gun.bullets.get(i).y, x, y) < 35)
        {
          health -= gun.bullets.get(i).damage;
          gun.bullets.get(i).die();
        }
      }
      
      for(int i = 0; i < gun.lasers.size(); i++)
      {
        if(dist(gun.lasers.get(i).x[0], gun.lasers.get(i).y[0], x, y) < 25 && pHealth == health && pPHealth == pHealth)
        {
          health -= gun.lasers.get(i).damage;
          gun.lasers.get(i).bounces++;          
        }
      }
      
      for(int i = 0; i < gun.missiles.size(); i++)
      {
        if(dist(gun.missiles.get(i).x, gun.missiles.get(i).y, x, y) < 37.5f)
        {
          health -= gun.missiles.get(i).damage;
          gun.missiles.get(i).die();
        }
      }
      
      for(int i = 0; i < gun.fastBullets.size(); i++)
      {
        if(dist(gun.fastBullets.get(i).x, gun.fastBullets.get(i).y, x, y) < 25)
        {
          health -= gun.fastBullets.get(i).damage;
          gun.fastBullets.get(i).die();
        }
      }
      
      push();
        noStroke();
        translate(x, y);
        fill(0xFFFFFFFF);
        rectMode(CENTER);
        ellipse(0, 0, 50, 50);
        fill(0xFF000000);
        ellipse(12, -7, 7, 7);
        ellipse(-12, -7, 7, 7);
        push();
          rotate(radians(10));
          fill(0xFFFF8800);
          ellipse(0, 0, 10, 10);
          triangle(0, 5, 0, -5, 20, 0);
        pop();
        ellipse(0, 17, 5, 5);
        ellipse(7, 14, 5, 5);
        ellipse(-7, 14, 5, 5);
        ellipse(13, 10, 5, 5);
        ellipse(-13, 10, 5, 5);
        
        fill(0xFF00FF00);
        rect(maxHealth/2 - health/2, 40, health, 10);
        fill(0xFF0066DD);
        rect(-health/2, 40, maxHealth - health, 10);
      pop();
    }
    else if(type == 2)
    {
      for(int i = 0; i < gun.bullets.size(); i++)
      {
        if(dist(gun.bullets.get(i).x, gun.bullets.get(i).y, x, y + 30) < 40 || dist(gun.bullets.get(i).x, gun.bullets.get(i).y, x, y - 25) < 35)
        {
          health -= gun.bullets.get(i).damage;
          gun.bullets.get(i).die();
        }
      }
      
      for(int i = 0; i < gun.lasers.size(); i++)
      {
        if((dist(gun.lasers.get(i).x[0], gun.lasers.get(i).y[0], x, y -25) < 25 || dist(gun.lasers.get(i).x[0], gun.lasers.get(i).y[0], x, y + 30) < 30) && pHealth == health && pPHealth == pHealth)
        {
          health -= gun.lasers.get(i).damage;
          gun.lasers.get(i).bounces++;          
        }
      }
      
      for(int i = 0; i < gun.missiles.size(); i++)
      {
        if(dist(gun.missiles.get(i).x, gun.missiles.get(i).y, x, y - 25) < 37.5f || dist(gun.missiles.get(i).x, gun.missiles.get(i).y, x, y + 30) < 42.5f)
        {
          health -= gun.missiles.get(i).damage;
          gun.missiles.get(i).die();
        }
      }
      
      for(int i = 0; i < gun.fastBullets.size(); i++)
      {
        if(dist(gun.fastBullets.get(i).x, gun.fastBullets.get(i).y, x, y - 25) < 25 || dist(gun.fastBullets.get(i).x, gun.fastBullets.get(i).y, x, y + 30) < 30)
        {
          health -= gun.fastBullets.get(i).damage;
          gun.fastBullets.get(i).die();
        }
      }
      
      push();
        noStroke();
        translate(x, y);
        fill(0xFFFFFFFF);
        rectMode(CENTER);
        ellipse(0, 25, 60, 60);
        
        ellipse(0, -25, 50, 50);
        fill(0xFF000000);
        ellipse(12, -32, 7, 7);
        ellipse(-12, -32, 7, 7);
        push();
          rotate(radians(10));
          fill(0xFFFF8800);
          ellipse(0, -25, 10, 10);
          triangle(0, -20, 0, -30, 20, -25);
        pop();
        ellipse(0, -8, 5, 5);
        ellipse(7, -11, 5, 5);
        ellipse(-7, -11, 5, 5);
        ellipse(13, -15, 5, 5);
        ellipse(-13, -15, 5, 5);
        
        fill(0xFF00FF00);
        rect(maxHealth/2 - health/2, 70, health, 10);
        fill(0xFF0066DD);
        rect(-health/2, 70, maxHealth - health, 10);
      pop();
    }
    else if(type == 2)
    {
      for(int i = 0; i < gun.bullets.size(); i++)
      {
        if(dist(gun.bullets.get(i).x, gun.bullets.get(i).y, x, y + 30) < 40 || dist(gun.bullets.get(i).x, gun.bullets.get(i).y, x, y - 25) < 35)
        {
          health -= gun.bullets.get(i).damage;
          gun.bullets.get(i).die();
        }
      }
      
      for(int i = 0; i < gun.lasers.size(); i++)
      {
        if((dist(gun.lasers.get(i).x[0], gun.lasers.get(i).y[0], x, y -25) < 25 || dist(gun.lasers.get(i).x[0], gun.lasers.get(i).y[0], x, y + 30) < 30) && pHealth == health && pPHealth == pHealth)
        {
          health -= gun.lasers.get(i).damage;
          gun.lasers.get(i).bounces++;          
        }
      }
      
      for(int i = 0; i < gun.missiles.size(); i++)
      {
        if(dist(gun.missiles.get(i).x, gun.missiles.get(i).y, x, y - 25) < 37.5f || dist(gun.missiles.get(i).x, gun.missiles.get(i).y, x, y + 30) < 42.5f)
        {
          health -= gun.missiles.get(i).damage;
          gun.missiles.get(i).die();
        }
      }
      
      for(int i = 0; i < gun.fastBullets.size(); i++)
      {
        if(dist(gun.fastBullets.get(i).x, gun.fastBullets.get(i).y, x, y - 25) < 25 || dist(gun.fastBullets.get(i).x, gun.fastBullets.get(i).y, x, y + 30) < 30)
        {
          health -= gun.fastBullets.get(i).damage;
          gun.fastBullets.get(i).die();
        }
      }
      
      push();
        noStroke();
        translate(x, y);
        fill(0xFFFFFFFF);
        rectMode(CENTER);
        ellipse(0, 25, 60, 60);
        
        ellipse(0, -25, 50, 50);
        fill(0xFF000000);
        ellipse(12, -32, 7, 7);
        ellipse(-12, -32, 7, 7);
        push();
          rotate(radians(10));
          fill(0xFFFF8800);
          ellipse(0, -25, 10, 10);
          triangle(0, -20, 0, -30, 20, -25);
        pop();
        ellipse(0, -8, 5, 5);
        ellipse(7, -11, 5, 5);
        ellipse(-7, -11, 5, 5);
        ellipse(13, -15, 5, 5);
        ellipse(-13, -15, 5, 5);
        
        fill(0xFF00FF00);
        rect(maxHealth/2 - health/2, 70, health, 10);
        fill(0xFF0066DD);
        rect(-health/2, 70, maxHealth - health, 10);
      pop();
    }
    else if(type == 3)
    {
      for(int i = 0; i < gun.bullets.size(); i++)
      {
        if(dist(gun.bullets.get(i).x, gun.bullets.get(i).y, x, y + 30) < 40 || dist(gun.bullets.get(i).x, gun.bullets.get(i).y, x, y - 25) < 35 || dist(gun.bullets.get(i).x, gun.bullets.get(i).y, x, y + 90) < 55)
        {
          health -= gun.bullets.get(i).damage;
          gun.bullets.get(i).die();
        }
      }
      
      for(int i = 0; i < gun.lasers.size(); i++)
      {
        if((dist(gun.lasers.get(i).x[0], gun.lasers.get(i).y[0], x, y -25) < 25 || dist(gun.lasers.get(i).x[0], gun.lasers.get(i).y[0], x, y + 30) < 30 || dist(gun.lasers.get(i).x[0], gun.lasers.get(i).y[0], x, y + 90) < 40) && pHealth == health && pPHealth == pHealth)
        {
          health -= gun.lasers.get(i).damage;
          gun.lasers.get(i).bounces--;          
        }
      }
      
      for(int i = 0; i < gun.missiles.size(); i++)
      {
        if(dist(gun.missiles.get(i).x, gun.missiles.get(i).y, x, y - 25) < 37.5f || dist(gun.missiles.get(i).x, gun.missiles.get(i).y, x, y + 30) < 42.5f || dist(gun.missiles.get(i).x, gun.missiles.get(i).y, x, y + 90) < 52.5f)
        {
          health -= gun.missiles.get(i).damage;
          gun.missiles.get(i).die();
        }
      }
      
      for(int i = 0; i < gun.fastBullets.size(); i++)
      {
        if(dist(gun.fastBullets.get(i).x, gun.fastBullets.get(i).y, x, y - 25) < 25 || dist(gun.fastBullets.get(i).x, gun.fastBullets.get(i).y, x, y + 30) < 30 || dist(gun.fastBullets.get(i).x, gun.fastBullets.get(i).y, x, y + 90) < 40)
        {
          health -= gun.fastBullets.get(i).damage;
          gun.fastBullets.get(i).die();
        }
      }
      
      push();
        translate(x, y);
        strokeWeight(5);
        stroke(0xFFA27942);
        line(15, 15, 45, 25);
        line(45, 25, 50, 20);
        line(45, 25, 50, 30);
        line(-15, 15, -45, 25);
        line(-45, 25, -50, 20);
        line(-45, 25, -50, 30);
        
        noStroke();
        fill(0xFFFFFFFF);
        rectMode(CENTER);
        ellipse(0, 25, 60, 60);
        ellipse(0, 85, 80, 80);
        
        ellipse(0, -25, 50, 50);
        fill(0xFF000000);
        ellipse(12, -32, 7, 7);
        ellipse(-12, -32, 7, 7);
        push();
          rotate(radians(10));
          fill(0xFFFF8800);
          ellipse(0, -25, 10, 10);
          triangle(0, -20, 0, -30, 20, -25);
        pop();
        ellipse(0, -8, 5, 5);
        ellipse(7, -11, 5, 5);
        ellipse(-7, -11, 5, 5);
        ellipse(13, -15, 5, 5);
        ellipse(-13, -15, 5, 5);
        
        fill(0xFF00FF00);
        rect(maxHealth/2 - health/2, 140, health, 10);
        fill(0xFF0066DD);
        rect(-health/2, 140, maxHealth - health, 10);
      pop();
    }
    
    if(health <= 0)
    {
      snowMen.remove(this);
      if(type == 2)
      {
        snowMen.add(new SnowMan(1, x + random(-50, 50), y + random(-50, 50)));
        snowMen.add(new SnowMan(1, x + random(-50, 50), y + random(-50, 50)));
      }
      if(type == 3)
      {
        snowMen.add(new SnowMan(2, x + random(-50, 50), y + random(-50, 50)));
        snowMen.add(new SnowMan(1, x + random(-50, 50), y + random(-50, 50)));
      }
    }
    
    if(dist(x, y, gun.x, gun.y) < 50 && state == 0)
    {
      t = 0;
      
      gun.bullets = new ArrayList<Bullet>();
      gun.lasers = new ArrayList<Laser>();
      gun.missiles = new ArrayList<Missile>();
      gun.fastBullets = new ArrayList<FastBullet>();
      
      pew.stop();
      explosion.stop();
      zap.stop();
      laserBounce.stop();
      boop.stop();
      hiss.stop();
      bigBoom.stop();
      shot.stop();
      pop.stop();
      
      newExplodeTime = 0;
      newSoundTime = 0;
      
      state = 1;
    }
  }
}


  public void settings() { fullScreen(P2D); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "pew_pew_zap_zap" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
